package org.iemm.sicomoro.db.dao;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class MovementTypeExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table movementType
     *
     * @mbggenerated Sun Sep 02 15:34:08 CDT 2012
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table movementType
     *
     * @mbggenerated Sun Sep 02 15:34:08 CDT 2012
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table movementType
     *
     * @mbggenerated Sun Sep 02 15:34:08 CDT 2012
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table movementType
     *
     * @mbggenerated Sun Sep 02 15:34:08 CDT 2012
     */
    public MovementTypeExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table movementType
     *
     * @mbggenerated Sun Sep 02 15:34:08 CDT 2012
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table movementType
     *
     * @mbggenerated Sun Sep 02 15:34:08 CDT 2012
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table movementType
     *
     * @mbggenerated Sun Sep 02 15:34:08 CDT 2012
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table movementType
     *
     * @mbggenerated Sun Sep 02 15:34:08 CDT 2012
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table movementType
     *
     * @mbggenerated Sun Sep 02 15:34:08 CDT 2012
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table movementType
     *
     * @mbggenerated Sun Sep 02 15:34:08 CDT 2012
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table movementType
     *
     * @mbggenerated Sun Sep 02 15:34:08 CDT 2012
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table movementType
     *
     * @mbggenerated Sun Sep 02 15:34:08 CDT 2012
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table movementType
     *
     * @mbggenerated Sun Sep 02 15:34:08 CDT 2012
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table movementType
     *
     * @mbggenerated Sun Sep 02 15:34:08 CDT 2012
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table movementType
     *
     * @mbggenerated Sun Sep 02 15:34:08 CDT 2012
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdMovementTypeIsNull() {
            addCriterion("idMovementType is null");
            return (Criteria) this;
        }

        public Criteria andIdMovementTypeIsNotNull() {
            addCriterion("idMovementType is not null");
            return (Criteria) this;
        }

        public Criteria andIdMovementTypeEqualTo(Integer value) {
            addCriterion("idMovementType =", value, "idMovementType");
            return (Criteria) this;
        }

        public Criteria andIdMovementTypeNotEqualTo(Integer value) {
            addCriterion("idMovementType <>", value, "idMovementType");
            return (Criteria) this;
        }

        public Criteria andIdMovementTypeGreaterThan(Integer value) {
            addCriterion("idMovementType >", value, "idMovementType");
            return (Criteria) this;
        }

        public Criteria andIdMovementTypeGreaterThanOrEqualTo(Integer value) {
            addCriterion("idMovementType >=", value, "idMovementType");
            return (Criteria) this;
        }

        public Criteria andIdMovementTypeLessThan(Integer value) {
            addCriterion("idMovementType <", value, "idMovementType");
            return (Criteria) this;
        }

        public Criteria andIdMovementTypeLessThanOrEqualTo(Integer value) {
            addCriterion("idMovementType <=", value, "idMovementType");
            return (Criteria) this;
        }

        public Criteria andIdMovementTypeIn(List<Integer> values) {
            addCriterion("idMovementType in", values, "idMovementType");
            return (Criteria) this;
        }

        public Criteria andIdMovementTypeNotIn(List<Integer> values) {
            addCriterion("idMovementType not in", values, "idMovementType");
            return (Criteria) this;
        }

        public Criteria andIdMovementTypeBetween(Integer value1, Integer value2) {
            addCriterion("idMovementType between", value1, value2, "idMovementType");
            return (Criteria) this;
        }

        public Criteria andIdMovementTypeNotBetween(Integer value1, Integer value2) {
            addCriterion("idMovementType not between", value1, value2, "idMovementType");
            return (Criteria) this;
        }

        public Criteria andNameIsNull() {
            addCriterion("name is null");
            return (Criteria) this;
        }

        public Criteria andNameIsNotNull() {
            addCriterion("name is not null");
            return (Criteria) this;
        }

        public Criteria andNameEqualTo(String value) {
            addCriterion("name =", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameNotEqualTo(String value) {
            addCriterion("name <>", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameGreaterThan(String value) {
            addCriterion("name >", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameGreaterThanOrEqualTo(String value) {
            addCriterion("name >=", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameLessThan(String value) {
            addCriterion("name <", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameLessThanOrEqualTo(String value) {
            addCriterion("name <=", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameLike(String value) {
            addCriterion("name like", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameNotLike(String value) {
            addCriterion("name not like", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameIn(List<String> values) {
            addCriterion("name in", values, "name");
            return (Criteria) this;
        }

        public Criteria andNameNotIn(List<String> values) {
            addCriterion("name not in", values, "name");
            return (Criteria) this;
        }

        public Criteria andNameBetween(String value1, String value2) {
            addCriterion("name between", value1, value2, "name");
            return (Criteria) this;
        }

        public Criteria andNameNotBetween(String value1, String value2) {
            addCriterion("name not between", value1, value2, "name");
            return (Criteria) this;
        }

        public Criteria andIdcMovementSignIsNull() {
            addCriterion("idcMovementSign is null");
            return (Criteria) this;
        }

        public Criteria andIdcMovementSignIsNotNull() {
            addCriterion("idcMovementSign is not null");
            return (Criteria) this;
        }

        public Criteria andIdcMovementSignEqualTo(Integer value) {
            addCriterion("idcMovementSign =", value, "idcMovementSign");
            return (Criteria) this;
        }

        public Criteria andIdcMovementSignNotEqualTo(Integer value) {
            addCriterion("idcMovementSign <>", value, "idcMovementSign");
            return (Criteria) this;
        }

        public Criteria andIdcMovementSignGreaterThan(Integer value) {
            addCriterion("idcMovementSign >", value, "idcMovementSign");
            return (Criteria) this;
        }

        public Criteria andIdcMovementSignGreaterThanOrEqualTo(Integer value) {
            addCriterion("idcMovementSign >=", value, "idcMovementSign");
            return (Criteria) this;
        }

        public Criteria andIdcMovementSignLessThan(Integer value) {
            addCriterion("idcMovementSign <", value, "idcMovementSign");
            return (Criteria) this;
        }

        public Criteria andIdcMovementSignLessThanOrEqualTo(Integer value) {
            addCriterion("idcMovementSign <=", value, "idcMovementSign");
            return (Criteria) this;
        }

        public Criteria andIdcMovementSignIn(List<Integer> values) {
            addCriterion("idcMovementSign in", values, "idcMovementSign");
            return (Criteria) this;
        }

        public Criteria andIdcMovementSignNotIn(List<Integer> values) {
            addCriterion("idcMovementSign not in", values, "idcMovementSign");
            return (Criteria) this;
        }

        public Criteria andIdcMovementSignBetween(Integer value1, Integer value2) {
            addCriterion("idcMovementSign between", value1, value2, "idcMovementSign");
            return (Criteria) this;
        }

        public Criteria andIdcMovementSignNotBetween(Integer value1, Integer value2) {
            addCriterion("idcMovementSign not between", value1, value2, "idcMovementSign");
            return (Criteria) this;
        }

        public Criteria andCreateDateIsNull() {
            addCriterion("createDate is null");
            return (Criteria) this;
        }

        public Criteria andCreateDateIsNotNull() {
            addCriterion("createDate is not null");
            return (Criteria) this;
        }

        public Criteria andCreateDateEqualTo(Date value) {
            addCriterion("createDate =", value, "createDate");
            return (Criteria) this;
        }

        public Criteria andCreateDateNotEqualTo(Date value) {
            addCriterion("createDate <>", value, "createDate");
            return (Criteria) this;
        }

        public Criteria andCreateDateGreaterThan(Date value) {
            addCriterion("createDate >", value, "createDate");
            return (Criteria) this;
        }

        public Criteria andCreateDateGreaterThanOrEqualTo(Date value) {
            addCriterion("createDate >=", value, "createDate");
            return (Criteria) this;
        }

        public Criteria andCreateDateLessThan(Date value) {
            addCriterion("createDate <", value, "createDate");
            return (Criteria) this;
        }

        public Criteria andCreateDateLessThanOrEqualTo(Date value) {
            addCriterion("createDate <=", value, "createDate");
            return (Criteria) this;
        }

        public Criteria andCreateDateIn(List<Date> values) {
            addCriterion("createDate in", values, "createDate");
            return (Criteria) this;
        }

        public Criteria andCreateDateNotIn(List<Date> values) {
            addCriterion("createDate not in", values, "createDate");
            return (Criteria) this;
        }

        public Criteria andCreateDateBetween(Date value1, Date value2) {
            addCriterion("createDate between", value1, value2, "createDate");
            return (Criteria) this;
        }

        public Criteria andCreateDateNotBetween(Date value1, Date value2) {
            addCriterion("createDate not between", value1, value2, "createDate");
            return (Criteria) this;
        }

        public Criteria andUpdateDateIsNull() {
            addCriterion("updateDate is null");
            return (Criteria) this;
        }

        public Criteria andUpdateDateIsNotNull() {
            addCriterion("updateDate is not null");
            return (Criteria) this;
        }

        public Criteria andUpdateDateEqualTo(Date value) {
            addCriterion("updateDate =", value, "updateDate");
            return (Criteria) this;
        }

        public Criteria andUpdateDateNotEqualTo(Date value) {
            addCriterion("updateDate <>", value, "updateDate");
            return (Criteria) this;
        }

        public Criteria andUpdateDateGreaterThan(Date value) {
            addCriterion("updateDate >", value, "updateDate");
            return (Criteria) this;
        }

        public Criteria andUpdateDateGreaterThanOrEqualTo(Date value) {
            addCriterion("updateDate >=", value, "updateDate");
            return (Criteria) this;
        }

        public Criteria andUpdateDateLessThan(Date value) {
            addCriterion("updateDate <", value, "updateDate");
            return (Criteria) this;
        }

        public Criteria andUpdateDateLessThanOrEqualTo(Date value) {
            addCriterion("updateDate <=", value, "updateDate");
            return (Criteria) this;
        }

        public Criteria andUpdateDateIn(List<Date> values) {
            addCriterion("updateDate in", values, "updateDate");
            return (Criteria) this;
        }

        public Criteria andUpdateDateNotIn(List<Date> values) {
            addCriterion("updateDate not in", values, "updateDate");
            return (Criteria) this;
        }

        public Criteria andUpdateDateBetween(Date value1, Date value2) {
            addCriterion("updateDate between", value1, value2, "updateDate");
            return (Criteria) this;
        }

        public Criteria andUpdateDateNotBetween(Date value1, Date value2) {
            addCriterion("updateDate not between", value1, value2, "updateDate");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table movementType
     *
     * @mbggenerated do_not_delete_during_merge Sun Sep 02 15:34:08 CDT 2012
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table movementType
     *
     * @mbggenerated Sun Sep 02 15:34:08 CDT 2012
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}